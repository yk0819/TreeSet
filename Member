import java.util.Comparator;

//public class Member implements Comparable<Member>{
public class Member implements Comparator<Member>{
	
	private int memberId;
	private String memberName;
	
	public Member() {
		
	}

	public Member(int memberId, String memberName) {
		this.memberId = memberId;
		this.memberName = memberName;
	}

	public int getMemberId() {
		return memberId;
	}

	public void setMemberId(int memberId) {
		this.memberId = memberId;
	}

	public String getMemberName() {
		return memberName;
	}

	public void setMemberName(String memberName) {
		this.memberName = memberName;
	}
	
	@Override
	public String toString() {
		return memberName + "様のIDは" + memberId + "です";
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof Member) {
			Member member = (Member)obj;
			if(this.memberId == member.memberId) {
				return true;
			}
			else return false;
		}
		return false;
	}

	@Override
	public int hashCode() {
		return memberId;
	}

	// 새로 들어가는 요소와 이미 들어가 있는 요소를 비교할 때는 매개변수 하나로 this를 사용
	// 들어가는 매개변수는 시스템에서 자동적으로 비교를 해준다. callback function
//	@Override
//	public int compareTo(Member member) { // 새로 들어가는 요소를 매개변수로
		
		// ID 기준, 들어가는 요소를 비교해서 기존값이 크면 양수 아니면 음수 같으면 0 (오름차순)
		// 내림차순인 경우 바꾸면 된다
//		if(this.memberId > member.memberId)
//			return 1;
//		else if(this.memberId < member.memberId)
//			return -1;
//		else return 0;
		
//		return(this.memberId - member.memberId); // 오름차순
//		return(this.memberId - member.memberId) * (-1); // 내림차순
//	}

	@Override // Comparator의 활용 : 이미 Comparable이 구현된 경우 Comparator로 비교하는 방식을 다시 구현할 수 있음

	public int compare(Member member1, Member member2) { // 
//		return (member1.memberId - member2.memberId); // 오름차순
		return (member2.memberId - member1.memberId); // 내림차순
	}
}
